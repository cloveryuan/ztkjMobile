"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var webpack = require("webpack");
var path = require("path");
var util_1 = require("./util");
var constant_1 = require("./constant");
var Bundle = /** @class */ (function () {
    function Bundle(options) {
        this.options = options;
        this.initDllConfig();
    }
    Bundle.prototype.initDllConfig = function () {
        var dllConfig = this.options.dllConfig;
        var dllPlugin = new webpack.DllPlugin({
            path: constant_1.MANIFEST_JSON_PATH,
            name: constant_1.DEFAULT_LIBRARY,
        });
        var output = __assign({}, dllConfig.output, { path: constant_1.DLL_PATH, library: constant_1.DEFAULT_LIBRARY });
        var plugins = dllConfig.plugins ? dllConfig.plugins
            .filter(function (plugin) { return !(plugin instanceof webpack.DllPlugin); })
            .concat([dllPlugin]) : [dllPlugin];
        this.dllConfig = __assign({}, dllConfig, { output: output,
            plugins: plugins });
    };
    Bundle.prototype.shouldRegenerateHash = function () {
        var dllConfig = this.options.dllConfig;
        var filename = dllConfig.output.filename;
        return /\[\S*hash\S*\]/.test(filename);
    };
    Bundle.prototype.regenerateHash = function () {
        var _this = this;
        var fileMd5Hash = util_1.default.getFileVersion(JSON.stringify(this.dllConfig, util_1.default.replacerPath) + JSON.stringify(this.getCurrentDllEntry()));
        this.getAbsoluteAssetsPath()
            .forEach(function (oldPath, index) {
            var oldChunkFile = _this.chunkFiles[index];
            var newChunkFile = oldChunkFile.split('.').map(function (chunk, chunkIndex) {
                if (chunkIndex === oldChunkFile.split('.').length - 2) {
                    return fileMd5Hash.slice(0, 8);
                }
                return chunk;
            }).join('.');
            var newPath = oldPath.replace(oldChunkFile, newChunkFile);
            _this.chunkFiles[index] = newChunkFile;
            util_1.default.renameSync(oldPath, newPath);
        });
    };
    Bundle.prototype.getRelativeAssetsPath = function (from) {
        var _this = this;
        return this.chunkFiles.map(function (file) {
            return path.normalize(path.relative(from, _this.options.dllConfig.output.path) + "/" + file);
        });
    };
    Bundle.prototype.getAbsoluteAssetsPath = function () {
        var _this = this;
        return this.chunkFiles.map(function (file) {
            return path.normalize(_this.dllConfig.output.path + "/" + file);
        });
    };
    Bundle.prototype.getCurrentDllEntry = function () {
        var packageJson = util_1.default.readJson(constant_1.DEFAULT_PACKAGE_JSON_PATH);
        var entry = this.dllConfig.entry;
        return Object.keys(entry).reduce(function (preVal, currentVal) {
            preVal[currentVal] = Array.isArray(entry[currentVal]) ?
                entry[currentVal].reduce(function (pVal, cVal) {
                    pVal[cVal] = packageJson.dependencies[cVal] || 0;
                    return pVal;
                }, {})
                :
                    packageJson.dependencies[currentVal] || 0;
            return preVal;
        }, {});
    };
    Bundle.prototype.shouldRepackaged = function () {
        var isFirstUsePlugin = !util_1.default.fileExist(constant_1.PLUGIN_PATH);
        var isFirstUseCurrentEnv = !util_1.default.fileExist(constant_1.DLL_PATH);
        var currentDllConfig = util_1.default.getFileVersion(JSON.stringify(this.dllConfig));
        var currentDllEntry = util_1.default.getFileVersion(JSON.stringify(this.getCurrentDllEntry()));
        if (isFirstUsePlugin) {
            var dllVersionJson_1 = __assign({}, constant_1.defaultDllVersionJson);
            dllVersionJson_1.dllConfig[constant_1.NODE_ENV] = currentDllConfig;
            dllVersionJson_1.dllEntry = currentDllEntry;
            util_1.default.writeJson(constant_1.DLL_VERSION_JSON_PATH, dllVersionJson_1);
            return true;
        }
        var dllVersionJson;
        if (util_1.default.fileExist(constant_1.DLL_VERSION_JSON_PATH)) {
            dllVersionJson = util_1.default.readJson(constant_1.DLL_VERSION_JSON_PATH);
        }
        else {
            dllVersionJson = __assign({}, constant_1.defaultDllVersionJson);
            util_1.default.writeJson(constant_1.DLL_VERSION_JSON_PATH, dllVersionJson);
        }
        if (dllVersionJson.alwayForceUpdate) {
            util_1.default.removeFile(constant_1.DLL_PATH);
            return true;
        }
        if (dllVersionJson.onceForceUpdate) {
            util_1.default.removeFile(constant_1.DLL_PATH);
            dllVersionJson.onceForceUpdate = false;
            util_1.default.writeJson(constant_1.DLL_VERSION_JSON_PATH, dllVersionJson);
            return true;
        }
        if (isFirstUseCurrentEnv) {
            return true;
        }
        if (currentDllConfig !== dllVersionJson.dllConfig[constant_1.NODE_ENV]) {
            util_1.default.removeFile(constant_1.DLL_PATH);
            dllVersionJson.dllConfig[constant_1.NODE_ENV] = currentDllConfig;
            util_1.default.writeJson(constant_1.DLL_VERSION_JSON_PATH, dllVersionJson);
            return true;
        }
        if (currentDllEntry !== dllVersionJson.dllEntry) {
            util_1.default.removeFile(constant_1.DLL_PATH);
            dllVersionJson.dllEntry = currentDllEntry;
            util_1.default.writeJson(constant_1.DLL_VERSION_JSON_PATH, dllVersionJson);
            return true;
        }
        this.chunkFiles = util_1.default.readDir(constant_1.DLL_PATH).filter(function (file) { return file.substr(file.length - 2) === "js"; });
        return false;
    };
    Bundle.prototype.repackaged = function () {
        var _this = this;
        util_1.default.warn("dll-webpack-plugin: re building !");
        return new Promise(function (res, rej) {
            webpack(_this.dllConfig, function (err, stats) {
                if (err) {
                    util_1.default.error("dll-webpack-plugin: " + err.message);
                    return rej(err);
                }
                util_1.default.success("dll-webpack-plugin: build success !");
                var chunks = stats.toJson().chunks;
                _this.chunkFiles = chunks.reduce(function (preVal, currentVal) {
                    return currentVal.files.reduce(function (pVal, cVal) {
                        return pVal.concat(cVal);
                    }, preVal);
                }, []);
                if (_this.shouldRegenerateHash()) {
                    _this.regenerateHash();
                }
                return res(_this.chunkFiles);
            });
        });
    };
    return Bundle;
}());
exports.default = Bundle;
