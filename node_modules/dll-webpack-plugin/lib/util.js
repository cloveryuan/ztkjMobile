"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fse = require("fs-extra");
var path = require("path");
var chalk_1 = require("chalk");
var md5 = require("md5");
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.prototype.log = function (msg) {
        console.log(msg);
    };
    Util.prototype.warn = function (msg) {
        console.log(chalk_1.default.yellow(msg));
    };
    Util.prototype.error = function (msg) {
        console.log(chalk_1.default.red(msg));
    };
    Util.prototype.success = function (msg) {
        console.log(chalk_1.default.green(msg));
    };
    Util.prototype.trainCaseToCamelCase = function (word) {
        return word.replace(/-([\w])/g, function (match, p1) {
            return p1.toUpperCase();
        });
    };
    Util.prototype.fileExist = function (path) {
        return fse.existsSync(path);
    };
    Util.prototype.readJson = function (path) {
        return this.fileExist(path) ?
            fse.readJsonSync(path)
            :
                {};
    };
    Util.prototype.writeJson = function (path, data) {
        fse.outputJSONSync(path, data);
    };
    Util.prototype.getFileVersion = function (source) {
        return md5(source);
    };
    Util.prototype.removeFile = function (path) {
        fse.removeSync(path);
    };
    ;
    Util.prototype.readDir = function (path) {
        return fse.readdirSync(path);
    };
    Util.prototype.readFile = function (path) {
        return this.fileExist(path) ?
            fse.readFileSync(path)
            :
                "";
    };
    Util.prototype.renameSync = function (oldPath, newPath) {
        fse.renameSync(oldPath, newPath);
    };
    Util.prototype.replacerPath = function (key, value) {
        if ((key === "path" || key === "context") && typeof value === "string") {
            return Array.from(path.relative(path.resolve(), value))
                .filter(function (str) { return str !== '/' && str !== "\\"; })
                .join('');
        }
        return value;
    };
    Util.prototype.pathJoin = function (path1, path2) {
        var p1 = Array.from(path1)
            .map(function (p, index, arr) {
            if (index === arr.length - 1) {
                return p === '/' || p === '\\' ? '' : p;
            }
            return p;
        })
            .join('');
        var p2 = Array.from(path2)
            .map(function (p, index) {
            if (index === 0) {
                return p === '/' || p === '\\' ? '' : p;
            }
            return p;
        })
            .join('');
        var join = process.platform === 'win32' ? '\\' : '/';
        return p1 + join + p2;
    };
    return Util;
}());
exports.default = new Util();
