import * as fse from "fs-extra";
import * as path from "path";
import chalk from "chalk";
import * as md5 from "md5";

class Util {
    public log(msg: string): void {
        console.log(msg);
    }
    public warn(msg: string): void {
        console.log(chalk.yellow(msg));
    }
    public error(msg: string): void {
        console.log(chalk.red(msg));
    }
    public success(msg: string): void {
        console.log(chalk.green(msg));
    }
    public trainCaseToCamelCase(word: string): string {
        return word.replace(/-([\w])/g, function (match, p1) {
            return p1.toUpperCase();
        });
    }
    public fileExist(path: string): boolean {
        return fse.existsSync(path)
    }
    public readJson(path: string): any {
        return this.fileExist(path) ?
            fse.readJsonSync(path)
            :
            {}
    }
    public writeJson(path: string, data): void {
        fse.outputJSONSync(path, data);
    }
    public getFileVersion(source: string) {
        return md5(source);
    }
    public removeFile(path: string): void {
        fse.removeSync(path);
    };
    public readDir(path: string): string[] {
        return fse.readdirSync(path);
    }
    public readFile(path: string): Buffer | string {
        return this.fileExist(path) ?
            fse.readFileSync(path)
            :
            "";
    }
    public renameSync(oldPath: fse.PathLike, newPath: fse.PathLike): void {
        fse.renameSync(oldPath, newPath);
    }
    public replacerPath(key: string, value: any) {
        if ((key === "path" || key === "context") && typeof value === "string") {
            return Array.from(path.relative(path.resolve(), value))
                .filter(str => str !== '/' && str !== "\\")
                .join('')
                
        }
        return value;
    }
    public pathJoin(path1: string, path2: string): string {
        const p1 = Array.from(path1)
            .map((p, index, arr) => {
                if (index === arr.length - 1) {
                    return p === '/' || p === '\\' ? '' : p
                }
                return p;
            })
            .join('');
        const p2 = Array.from(path2)
            .map((p, index) => {
                if (index === 0) {
                    return p === '/' || p === '\\' ? '' : p
                }
                return p;
            })
            .join('');
        const join = process.platform === 'win32' ? '\\' : '/'
        return p1 + join + p2
    }
}

export default new Util();